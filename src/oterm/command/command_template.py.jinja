#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "oterm=={{version}}",
# ]
# ///

from typing import Iterable

from textual.app import App, ComposeResult, SystemCommand
from textual.binding import Binding
from textual.containers import Vertical
from textual.screen import Screen

from oterm.app.css import tcss
from oterm.app.mcp_prompt import MCPPrompt
from oterm.app.widgets.chat import ChatContainer
from oterm.config import appConfig
from oterm.store.store import Store
from oterm.tools.external import load_external_tools
from oterm.tools.mcp.setup import setup_mcp_servers, teardown_mcp_servers
from oterm.types import ChatModel, ExternalToolDefinition

db_id = {{db_id}}
name = "{{name}}"

class InlineApp(App):
    CSS = tcss
    TITLE = f"{name}"
    BINDINGS = [
        Binding("ctrl+q", "quit", "quit", id="quit"),
    ]

    async def load_mcp(self):
        from oterm.tools import available_tool_defs
        from oterm.tools.mcp.prompts import available_prompt_defs

        external_tool_defs: list[ExternalToolDefinition] = appConfig.get("tools", [])  # type: ignore
        external_tools = list(load_external_tools(external_tool_defs))
        available_tool_defs["external"] = external_tools
        mcp_tool_calls, mcp_prompt_calls = await setup_mcp_servers()
        available_tool_defs.update(mcp_tool_calls)
        available_prompt_defs.update(mcp_prompt_calls)

    def get_system_commands(self, screen: Screen) -> Iterable[SystemCommand]:
        yield from super().get_system_commands(screen)
        yield SystemCommand(
            "Use MCP prompt",
            "Create and copy to clipboard an MCP prompt.",
            self.action_mcp_prompt,
        )

    async def action_mcp_prompt(self) -> None:
        chat = tabs.active_pane.query_one(ChatContainer)
        chat.action_mcp_prompt()

    async def action_quit(self) -> None:
        self.log("Quitting...")
        await teardown_mcp_servers()
        return self.exit()

    async def on_mount(self) -> None:
        await self.load_mcp()
        store = await Store.get_store()
        chat_model = await store.get_chat(db_id)

        messages = await store.get_messages(db_id)
        chat = ChatContainer(chat_model=chat_model)
        await self.get_child_by_id("app-root").mount(chat)
        await chat.load_messages()

    def compose(self) -> ComposeResult:
        yield Vertical(id="app-root")


if __name__ == "__main__":
    InlineApp().run(inline=True)
